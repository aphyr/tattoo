{:use-macros nil, :excludes #{}, :name tattoo.core, :imports nil, :requires {g tattoo.geometry, tattoo.geometry tattoo.geometry, t tattoo.tree, tattoo.tree tattoo.tree, svg cljsjs.snapsvg, cljsjs.snapsvg cljsjs.snapsvg}, :uses nil, :defs {refine-side {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 132, :column 7, :end-line 132, :end-column 18, :arglists (quote ([t side])), :doc "Constrains a side to start at the base, and to the appropriate length."}, :name tattoo.core/refine-side, :variadic false, :file "src/tattoo/core.cljs", :end-column 18, :method-params ([t side]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 132, :end-line 132, :max-fixed-arity 2, :fn-var true, :arglists (quote ([t side])), :doc "Constrains a side to start at the base, and to the appropriate length."}, base {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 39, :column 7, :end-line 39, :end-column 11, :arglists (quote ([t])), :doc "Computes the base of a node."}, :name tattoo.core/base, :variadic false, :file "src/tattoo/core.cljs", :end-column 11, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t])), :doc "Computes the base of a node."}, initial-coords {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 253, :column 7, :end-line 253, :end-column 21, :arglists (quote ([t])), :doc "Augments a tree by adding coordinates and scales to each node."}, :name tattoo.core/initial-coords, :variadic false, :file "src/tattoo/core.cljs", :end-column 21, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 253, :end-line 253, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t])), :doc "Augments a tree by adding coordinates and scales to each node."}, log {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 14, :column 7, :end-line 14, :end-column 10, :arglists (quote ([& args])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name tattoo.core/log, :variadic true, :file "src/tattoo/core.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 14, :end-line 14, :max-fixed-arity 0, :fn-var true, :arglists ([& args])}, refresh! {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 327, :column 7, :end-line 327, :end-column 15, :arglists (quote ([])), :doc "Resets scene."}, :name tattoo.core/refresh!, :variadic false, :file "src/tattoo/core.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 327, :end-line 327, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Resets scene."}, internal-sides {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 81, :column 7, :end-line 81, :end-column 21, :arglists (quote ([t])), :doc "Lays out internal sides."}, :name tattoo.core/internal-sides, :variadic false, :file "src/tattoo/core.cljs", :end-column 21, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t])), :doc "Lays out internal sides."}, apex {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 190, :column 7, :end-line 190, :end-column 11, :arglists (quote ([t])), :doc "Computes the apex of a node."}, :name tattoo.core/apex, :variadic false, :file "src/tattoo/core.cljs", :end-column 11, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 190, :end-line 190, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t])), :doc "Computes the apex of a node."}, refine-sides {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 161, :column 7, :end-line 161, :end-column 19, :arglists (quote ([t])), :doc "Constrains sides to base and to appropriate lengths."}, :name tattoo.core/refine-sides, :variadic false, :file "src/tattoo/core.cljs", :end-column 19, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 161, :end-line 161, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t])), :doc "Constrains sides to base and to appropriate lengths."}, caps {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 183, :column 7, :end-line 183, :end-column 11, :arglists (quote ([t])), :doc "Adds caps to open nodes."}, :name tattoo.core/caps, :variadic false, :file "src/tattoo/core.cljs", :end-column 11, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 183, :end-line 183, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t])), :doc "Adds caps to open nodes."}, parent-distance {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 30, :column 7, :end-line 30, :end-column 22, :arglists (quote ([t])), :doc "Adds the distance to the parent (or if no parent, to the farthest child: a\n  characteristic metric."}, :name tattoo.core/parent-distance, :variadic false, :file "src/tattoo/core.cljs", :end-column 22, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t])), :doc "Adds the distance to the parent (or if no parent, to the farthest child: a\n  characteristic metric."}, split-angle {:name tattoo.core/split-angle, :file "src/tattoo/core.cljs", :line 6, :column 1, :end-line 6, :end-column 17, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 6, :column 6, :end-line 6, :end-column 17}}, init! {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 316, :column 7, :end-line 316, :end-column 12, :arglists (quote ([s tree])), :doc "Sets up scene on an SVG element"}, :name tattoo.core/init!, :variadic false, :file "src/tattoo/core.cljs", :end-column 12, :method-params ([s tree]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 316, :end-line 316, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s tree])), :doc "Sets up scene on an SVG element"}, layout {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 231, :column 7, :end-line 231, :end-column 13, :arglists (quote ([t])), :doc "All layout passes"}, :name tattoo.core/layout, :variadic false, :file "src/tattoo/core.cljs", :end-column 13, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 231, :end-line 231, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t])), :doc "All layout passes"}, render-control-points! {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 281, :column 7, :end-line 281, :end-column 29, :arglists (quote ([t s] [t top s])), :doc "Renders control points for dtree nodes.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([t s] [t top s]), :arglists ([t s] [t top s]), :arglists-meta (nil nil)}}, :name tattoo.core/render-control-points!, :variadic false, :file "src/tattoo/core.cljs", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([t s] [t top s]), :arglists ([t s] [t top s]), :arglists-meta (nil nil)}, :method-params ([t s] [t top s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 281, :end-line 281, :max-fixed-arity 3, :fn-var true, :arglists ([t s] [t top s]), :doc "Renders control points for dtree nodes."}, grid {:name tattoo.core/grid, :file "src/tattoo/core.cljs", :line 8, :column 1, :end-line 8, :end-column 10, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 8, :column 6, :end-line 8, :end-column 10}}, refine-caps {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 197, :column 7, :end-line 197, :end-column 18, :arglists (quote ([t])), :doc "Pins caps to apex"}, :name tattoo.core/refine-caps, :variadic false, :file "src/tattoo/core.cljs", :end-column 18, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 197, :end-line 197, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t])), :doc "Pins caps to apex"}, Dtheta {:name tattoo.core/Dtheta, :file "src/tattoo/core.cljs", :line 10, :column 1, :end-line 10, :end-column 12, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 10, :column 6, :end-line 10, :end-column 12}}, render! {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 240, :column 7, :end-line 240, :end-column 14, :arglists (quote ([t s])), :doc "Renders a tree once laid out."}, :name tattoo.core/render!, :variadic false, :file "src/tattoo/core.cljs", :end-column 14, :method-params ([t s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 240, :end-line 240, :max-fixed-arity 2, :fn-var true, :arglists (quote ([t s])), :doc "Renders a tree once laid out."}, external-sides {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 104, :column 7, :end-line 104, :end-column 21, :arglists (quote ([t])), :doc "Adds external sides to a node."}, :name tattoo.core/external-sides, :variadic false, :file "src/tattoo/core.cljs", :end-column 21, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 104, :end-line 104, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t])), :doc "Adds external sides to a node."}, base-corners {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 111, :column 7, :end-line 111, :end-column 19, :arglists (quote ([t])), :doc "Given a node, computes base corners based on the intersection of nearby\n  bases OR bases with parent sides OR own sides."}, :name tattoo.core/base-corners, :variadic false, :file "src/tattoo/core.cljs", :end-column 19, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 111, :end-line 111, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t])), :doc "Given a node, computes base corners based on the intersection of nearby\n  bases OR bases with parent sides OR own sides."}, cap {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 168, :column 7, :end-line 168, :end-column 10, :arglists (quote ([t side])), :doc "Constructs a particular cap based on side"}, :name tattoo.core/cap, :variadic false, :file "src/tattoo/core.cljs", :end-column 10, :method-params ([t side]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 168, :end-line 168, :max-fixed-arity 2, :fn-var true, :arglists (quote ([t side])), :doc "Constructs a particular cap based on side"}, layout-0 {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 206, :column 7, :end-line 206, :end-column 15, :arglists (quote ([t]))}, :name tattoo.core/layout-0, :variadic false, :file "src/tattoo/core.cljs", :end-column 15, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 206, :end-line 206, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t]))}, layout-2 {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 222, :column 7, :end-line 222, :end-column 15, :arglists (quote ([t]))}, :name tattoo.core/layout-2, :variadic false, :file "src/tattoo/core.cljs", :end-column 15, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 222, :end-line 222, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t]))}, add-line! {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 23, :column 7, :end-line 23, :end-column 16, :arglists (quote ([s [a b]] [s line opts])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s [a b]] [s line opts]), :arglists ([s [a b]] [s line opts]), :arglists-meta (nil nil)}}, :name tattoo.core/add-line!, :variadic false, :file "src/tattoo/core.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s [a b]] [s line opts]), :arglists ([s [a b]] [s line opts]), :arglists-meta (nil nil)}, :method-params ([s [a b]] [s line opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 3, :fn-var true, :arglists ([s [a b]] [s line opts])}, external-side {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 88, :column 7, :end-line 88, :end-column 20, :arglists (quote ([t dir])), :doc "Returns a side to a node, given a directional coefficient: -1 or +1."}, :name tattoo.core/external-side, :variadic false, :file "src/tattoo/core.cljs", :end-column 20, :method-params ([t dir]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 88, :end-line 88, :max-fixed-arity 2, :fn-var true, :arglists (quote ([t dir])), :doc "Returns a side to a node, given a directional coefficient: -1 or +1."}, refine-base {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 127, :column 7, :end-line 127, :end-column 18, :arglists (quote ([t])), :doc "Constrains base to base corners."}, :name tattoo.core/refine-base, :variadic false, :file "src/tattoo/core.cljs", :end-column 18, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 127, :end-line 127, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t])), :doc "Constrains base to base corners."}, internal-side {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 67, :column 7, :end-line 67, :end-column 20, :arglists (quote ([t n dir])), :doc "Lays out an internal side for a node and its neighbor, given a directional\n  coefficient of -1 or +1."}, :name tattoo.core/internal-side, :variadic false, :file "src/tattoo/core.cljs", :end-column 20, :method-params ([t n dir]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 67, :end-line 67, :max-fixed-arity 3, :fn-var true, :arglists (quote ([t n dir])), :doc "Lays out an internal side for a node and its neighbor, given a directional\n  coefficient of -1 or +1."}, layout-1 {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 214, :column 7, :end-line 214, :end-column 15, :arglists (quote ([t]))}, :name tattoo.core/layout-1, :variadic false, :file "src/tattoo/core.cljs", :end-column 15, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 214, :end-line 214, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t]))}, add-circle! {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 18, :column 7, :end-line 18, :end-column 18, :arglists (quote ([s point opts]))}, :name tattoo.core/add-circle!, :variadic false, :file "src/tattoo/core.cljs", :end-column 18, :method-params ([s point opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 18, :end-line 18, :max-fixed-arity 3, :fn-var true, :arglists (quote ([s point opts]))}, svg {:name tattoo.core/svg, :file "src/tattoo/core.cljs", :line 12, :column 1, :end-line 12, :end-column 13, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 12, :column 10, :end-line 12, :end-column 13}}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:y :parent-distance :children :r = :stroke :side2 :parent :cap1 :scale :base-corner-2 :base-corner-1 * :fill oct :theta pow :after :strokeWidth e / k :side1 c :origin :cap2 :x :base :before hbar :apex alpha}, :order [:x :y :parent-distance :parent :children :base :theta :origin :r :side1 :before :side2 :after :base-corner-1 :base-corner-2 :cap1 :cap2 :apex :stroke :strokeWidth :scale :fill = alpha / * k pow e hbar c oct]}, :doc nil}