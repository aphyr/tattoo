{:use-macros nil, :excludes #{cat * or keys + and def}, :name cljs.spec, :imports nil, :requires {cljs.core cljs.core, gobj goog.object, goog.object goog.object, walk clojure.walk, gen cljs.spec.impl.gen, cljs.spec.impl.gen cljs.spec.impl.gen, c cljs.core, str clojure.string, clojure.string clojure.string, clojure.walk clojure.walk}, :uses nil, :defs {fn-specs? {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 255, :column 8, :end-line 255, :end-column 17, :private true, :arglists (quote ([m])), :doc "Fn-specs must include at least :args or :ret specs."}, :private true, :name cljs.spec/fn-specs?, :variadic false, :file "out/cljs/spec.cljs", :end-column 17, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 255, :end-line 255, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :doc "Fn-specs must include at least :args or :ret specs."}, form {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 110, :column 7, :end-line 110, :end-column 11, :arglists (quote ([spec])), :doc "returns the spec as data"}, :name cljs.spec/form, :variadic false, :file "out/cljs/spec.cljs", :end-column 11, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 110, :end-line 110, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec])), :doc "returns the spec as data"}, *recursion-limit* {:name cljs.spec/*recursion-limit*, :file "out/cljs/spec.cljs", :line 19, :column 1, :end-line 19, :end-column 33, :dynamic true, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 19, :column 16, :end-line 19, :end-column 33, :dynamic true}, :doc "A soft limit on how many times a branching spec (or/alt/*/opt-keys/multi-spec)\n  can be recursed through during generation. After this a\n  non-recursive branch will be chosen."}, t_cljs$spec29172 {:num-fields 4, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec29172, :file "out/cljs/spec.cljs", :type true, :anonymous true, :column 3, :line 941, :record false, :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}}, op-explain {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 811, :column 8, :end-line 811, :end-column 18, :private true, :arglists (quote ([form p path via in input]))}, :private true, :name cljs.spec/op-explain, :variadic false, :file "out/cljs/spec.cljs", :end-column 18, :method-params ([form p path via in input]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 811, :end-line 811, :max-fixed-arity 6, :fn-var true, :arglists (quote ([form p path via in input]))}, alt-impl {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 720, :column 19, :end-line 720, :end-column 27, :skip-wiki true, :arglists (quote ([ks ps forms])), :doc "Do not call this directly, use 'alt'"}, :name cljs.spec/alt-impl, :variadic false, :file "out/cljs/spec.cljs", :end-column 27, :method-params ([ks ps forms]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 720, :end-line 720, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ks ps forms])), :doc "Do not call this directly, use 'alt'"}, def-impl {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 222, :column 19, :end-line 222, :end-column 27, :skip-wiki true, :arglists (quote ([k form spec])), :doc "Do not call this directly, use 'def'"}, :name cljs.spec/def-impl, :variadic false, :file "out/cljs/spec.cljs", :end-column 27, :method-params ([k form spec]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 222, :end-line 222, :max-fixed-arity 3, :fn-var true, :arglists (quote ([k form spec])), :doc "Do not call this directly, use 'def'"}, unstrument* {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 339, :column 7, :end-line 339, :end-column 18, :arglists (quote ([v]))}, :name cljs.spec/unstrument*, :variadic false, :file "out/cljs/spec.cljs", :end-column 18, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 339, :end-line 339, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, regex-spec-impl {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 938, :column 19, :end-line 938, :end-column 34, :skip-wiki true, :arglists (quote ([re gfn])), :doc "Do not call this directly, use 'spec' with a regex op argument"}, :name cljs.spec/regex-spec-impl, :variadic false, :file "out/cljs/spec.cljs", :end-column 34, :method-params ([re gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 938, :end-line 938, :max-fixed-arity 2, :fn-var true, :arglists (quote ([re gfn])), :doc "Do not call this directly, use 'spec' with a regex op argument"}, explain-data* {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 145, :column 7, :end-line 145, :end-column 20, :arglists (quote ([spec path via in x]))}, :name cljs.spec/explain-data*, :variadic false, :file "out/cljs/spec.cljs", :end-column 20, :method-params ([spec path via in x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 145, :end-line 145, :max-fixed-arity 5, :fn-var true, :arglists (quote ([spec path via in x]))}, add-ret {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 768, :column 8, :end-line 768, :end-column 15, :private true, :arglists (quote ([p r k]))}, :private true, :name cljs.spec/add-ret, :variadic false, :file "out/cljs/spec.cljs", :end-column 15, :method-params ([p r k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 768, :end-line 768, :max-fixed-arity 3, :fn-var true, :arglists (quote ([p r k]))}, explain-pred-list {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 623, :column 8, :end-line 623, :end-column 25, :private true, :arglists (quote ([forms preds path via in x]))}, :private true, :name cljs.spec/explain-pred-list, :variadic false, :file "out/cljs/spec.cljs", :end-column 25, :method-params ([forms preds path via in x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 623, :end-line 623, :max-fixed-arity 6, :fn-var true, :arglists (quote ([forms preds path via in x]))}, ->t_cljs$spec28966 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([and-spec-impl forms preds gfn meta28967])), :file nil}, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec28966, :variadic false, :file "out/cljs/spec.cljs", :method-params ([and-spec-impl forms preds gfn meta28967]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 637, :max-fixed-arity 5, :fn-var true, :arglists (quote ([and-spec-impl forms preds gfn meta28967])), :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}}, alt2 {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 718, :column 8, :end-line 718, :end-column 12, :private true, :arglists (quote ([p1 p2]))}, :private true, :name cljs.spec/alt2, :variadic false, :file "out/cljs/spec.cljs", :end-column 12, :method-params ([p1 p2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 718, :end-line 718, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p1 p2]))}, registry-ref {:name cljs.spec/registry-ref, :file "out/cljs/spec.cljs", :line 44, :column 1, :end-line 44, :end-column 32, :private true, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 44, :column 20, :end-line 44, :end-column 32, :private true}}, fn-spec-sym {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 260, :column 8, :end-line 260, :end-column 19, :private true, :arglists (quote ([sym role]))}, :private true, :name cljs.spec/fn-spec-sym, :variadic false, :file "out/cljs/spec.cljs", :end-column 19, :method-params ([sym role]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 260, :end-line 260, :max-fixed-arity 2, :fn-var true, :arglists (quote ([sym role]))}, accept? {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 655, :column 8, :end-line 655, :end-column 15, :private true, :arglists (quote ([{:keys [:cljs.spec/op]}]))}, :private true, :name cljs.spec/accept?, :variadic false, :file "out/cljs/spec.cljs", :end-column 15, :method-params ([p__28974]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 655, :end-line 655, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [:cljs.spec/op]}]))}, ->t_cljs$spec29176 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([regex-spec-impl re gfn meta29177])), :file nil}, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec29176, :variadic false, :file "out/cljs/spec.cljs", :method-params ([regex-spec-impl re gfn meta29177]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 941, :max-fixed-arity 4, :fn-var true, :arglists (quote ([regex-spec-impl re gfn meta29177])), :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}}, and-spec-impl {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 634, :column 19, :end-line 634, :end-column 32, :skip-wiki true, :arglists (quote ([forms preds gfn])), :doc "Do not call this directly, use 'and'"}, :name cljs.spec/and-spec-impl, :variadic false, :file "out/cljs/spec.cljs", :end-column 32, :method-params ([forms preds gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 634, :end-line 634, :max-fixed-arity 3, :fn-var true, :arglists (quote ([forms preds gfn])), :doc "Do not call this directly, use 'and'"}, accept {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 653, :column 8, :end-line 653, :end-column 14, :private true, :arglists (quote ([x]))}, :private true, :name cljs.spec/accept, :variadic false, :file "out/cljs/spec.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 653, :end-line 653, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, recur-limit? {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 350, :column 8, :end-line 350, :end-column 20, :private true, :arglists (quote ([rmap id path k]))}, :private true, :name cljs.spec/recur-limit?, :variadic false, :file "out/cljs/spec.cljs", :end-column 20, :method-params ([rmap id path k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 350, :end-line 350, :max-fixed-arity 4, :fn-var true, :arglists (quote ([rmap id path k]))}, describe* {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 42, :column 4, :end-line 42, :end-column 13, :protocol cljs.spec/Spec, :doc nil, :arglists (quote ([spec]))}, :protocol cljs.spec/Spec, :name cljs.spec/describe*, :variadic false, :file "out/cljs/spec.cljs", :end-column 13, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 42, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec])), :doc nil}, map-spec-impl {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 384, :column 19, :end-line 384, :end-column 32, :skip-wiki true, :arglists (quote ([{:keys [req-un opt-un pred-exprs opt-keys req-specs req req-keys opt-specs pred-forms opt gfn], :as argm}])), :doc "Do not call this directly, use 'spec' with a map argument"}, :name cljs.spec/map-spec-impl, :variadic false, :file "out/cljs/spec.cljs", :end-column 32, :method-params ([p__28775]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 384, :end-line 384, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [req-un opt-un pred-exprs opt-keys req-specs req req-keys opt-specs pred-forms opt gfn], :as argm}])), :doc "Do not call this directly, use 'spec' with a map argument"}, *instrument-enabled* {:meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 33, :column 26, :end-line 33, :end-column 46, :dynamic true, :private true}, :private true, :name cljs.spec/*instrument-enabled*, :file "out/cljs/spec.cljs", :end-column 46, :column 1, :dynamic true, :line 33, :end-line 33, :doc "if false, instrumented fns call straight through"}, t_cljs$spec28861 {:num-fields 4, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec28861, :file "out/cljs/spec.cljs", :type true, :anonymous true, :column 4, :line 528, :record false, :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}}, instrumented-vars {:name cljs.spec/instrumented-vars, :file "out/cljs/spec.cljs", :line 322, :column 1, :end-line 322, :end-column 33, :private true, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 322, :column 16, :end-line 322, :end-column 33, :private true}, :doc "Map for instrumented vars to :raw/:wrapped fns"}, re-explain {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 914, :column 8, :end-line 914, :end-column 18, :private true, :arglists (quote ([path via in re input]))}, :private true, :name cljs.spec/re-explain, :variadic false, :file "out/cljs/spec.cljs", :end-column 18, :method-params ([path via in re input]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 914, :end-line 914, :max-fixed-arity 5, :fn-var true, :arglists (quote ([path via in re input]))}, alts {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 717, :column 8, :end-line 717, :end-column 12, :private true, :arglists (quote ([& ps])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(ps)], :arglists ([& ps]), :arglists-meta (nil)}}, :private true, :name cljs.spec/alts, :variadic true, :file "out/cljs/spec.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(ps)], :arglists ([& ps]), :arglists-meta (nil)}, :method-params [(ps)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 717, :end-line 717, :max-fixed-arity 0, :fn-var true, :arglists ([& ps])}, ->t_cljs$spec29187 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([fspec-impl argspec aform retspec rform fnspec fform gfn specs meta29188])), :file nil}, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec29187, :variadic false, :file "out/cljs/spec.cljs", :method-params ([fspec-impl argspec aform retspec rform fnspec fform gfn specs meta29188]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 988, :max-fixed-arity 10, :fn-var true, :arglists (quote ([fspec-impl argspec aform retspec rform fnspec fform gfn specs meta29188])), :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}}, with-name {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 48, :column 8, :end-line 48, :end-column 17, :private true, :arglists (quote ([spec name]))}, :private true, :name cljs.spec/with-name, :variadic false, :file "out/cljs/spec.cljs", :end-column 17, :method-params ([spec name]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 48, :end-line 48, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec name]))}, ->t_cljs$spec29172 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([regex-spec-impl re gfn meta29173])), :file nil}, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec29172, :variadic false, :file "out/cljs/spec.cljs", :method-params ([regex-spec-impl re gfn meta29173]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 941, :max-fixed-arity 4, :fn-var true, :arglists (quote ([regex-spec-impl re gfn meta29173])), :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}}, explain {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 190, :column 7, :end-line 190, :end-column 14, :arglists (quote ([spec x])), :doc "Given a spec and a value that fails to conform, prints an explanation to *out*."}, :name cljs.spec/explain, :variadic false, :file "out/cljs/spec.cljs", :end-column 14, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 190, :end-line 190, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x])), :doc "Given a spec and a value that fails to conform, prints an explanation to *out*."}, t_cljs$spec28875 {:num-fields 8, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec28875, :file "out/cljs/spec.cljs", :type true, :anonymous true, :column 5, :line 585, :record false, :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}}, ->t_cljs$spec28842 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([form mmvar retag gfn id predx dval tag meta28843])), :file nil}, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec28842, :variadic false, :file "out/cljs/spec.cljs", :method-params ([form mmvar retag gfn id predx dval tag meta28843]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 6, :factory :positional, :line 491, :max-fixed-arity 9, :fn-var true, :arglists (quote ([form mmvar retag gfn id predx dval tag meta28843])), :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}}, spec-name {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 51, :column 8, :end-line 51, :end-column 17, :private true, :arglists (quote ([spec]))}, :private true, :name cljs.spec/spec-name, :variadic false, :file "out/cljs/spec.cljs", :end-column 17, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 51, :end-line 51, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec]))}, map-spec {:name cljs.spec/map-spec, :file "out/cljs/spec.cljs", :line 237, :column 1, :end-line 237, :end-column 18, :declared true, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 237, :column 10, :end-line 237, :end-column 18, :declared true}}, with-gen* {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 41, :column 4, :end-line 41, :end-column 13, :protocol cljs.spec/Spec, :doc nil, :arglists (quote ([spec gfn]))}, :protocol cljs.spec/Spec, :name cljs.spec/with-gen*, :variadic false, :file "out/cljs/spec.cljs", :end-column 13, :method-params ([spec gfn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 41, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec gfn])), :doc nil}, ->t_cljs$spec29194 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([fspec-impl argspec aform retspec rform fnspec fform gfn specs meta29195])), :file nil}, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec29194, :variadic false, :file "out/cljs/spec.cljs", :method-params ([fspec-impl argspec aform retspec rform fnspec fform gfn specs meta29195]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 988, :max-fixed-arity 10, :fn-var true, :arglists (quote ([fspec-impl argspec aform retspec rform fnspec fform gfn specs meta29195])), :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}}, spec-checking-fn {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 275, :column 8, :end-line 275, :end-column 24, :private true, :arglists (quote ([v f]))}, :private true, :name cljs.spec/spec-checking-fn, :variadic false, :file "out/cljs/spec.cljs", :end-column 24, :method-params ([v f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 275, :end-line 275, :max-fixed-arity 2, :fn-var true, :arglists (quote ([v f]))}, ->t_cljs$spec28830 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([spec-impl form pred gfn cpred? meta28831])), :file nil}, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec28830, :variadic false, :file "out/cljs/spec.cljs", :method-params ([spec-impl form pred gfn cpred? meta28831]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 464, :max-fixed-arity 6, :fn-var true, :arglists (quote ([spec-impl form pred gfn cpred? meta28831])), :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}}, or-spec-impl {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 572, :column 19, :end-line 572, :end-column 31, :skip-wiki true, :arglists (quote ([keys forms preds gfn])), :doc "Do not call this directly, use 'or'"}, :name cljs.spec/or-spec-impl, :variadic false, :file "out/cljs/spec.cljs", :end-column 31, :method-params ([keys forms preds gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 572, :end-line 572, :max-fixed-arity 4, :fn-var true, :arglists (quote ([keys forms preds gfn])), :doc "Do not call this directly, use 'or'"}, specize {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 101, :column 8, :end-line 101, :end-column 15, :private true, :arglists (quote ([s]))}, :private true, :name cljs.spec/specize, :variadic false, :file "out/cljs/spec.cljs", :end-column 15, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 101, :end-line 101, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s]))}, fn-specs {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 264, :column 7, :end-line 264, :end-column 15, :arglists (quote ([v])), :doc "Returns :args/:ret/:fn map of specs for var or symbol v."}, :name cljs.spec/fn-specs, :variadic false, :file "out/cljs/spec.cljs", :end-column 15, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 264, :end-line 264, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v])), :doc "Returns :args/:ret/:fn map of specs for var or symbol v."}, *fspec-iterations* {:name cljs.spec/*fspec-iterations*, :file "out/cljs/spec.cljs", :line 25, :column 1, :end-line 25, :end-column 34, :dynamic true, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 25, :column 16, :end-line 25, :end-column 34, :dynamic true}, :doc "The number of times an anonymous fn specified by fspec will be (generatively) tested during conform"}, Spec {:meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 37, :column 14, :end-line 37, :end-column 18, :doc nil, :protocol-symbol true, :jsdoc ("@interface"), :protocol-info {:methods {conform* [[spec x]], explain* [[spec path via in x]], gen* [[spec overrides path rmap]], with-gen* [[spec gfn]], describe* [[spec]]}}}, :protocol-symbol true, :name cljs.spec/Spec, :file "out/cljs/spec.cljs", :end-column 18, :column 1, :line 37, :protocol-info {:methods {conform* [[spec x]], explain* [[spec path via in x]], gen* [[spec overrides path rmap]], with-gen* [[spec gfn]], describe* [[spec]]}}, :info nil, :end-line 37, :impls #{cljs.spec/t_cljs$spec28875 cljs.spec/t_cljs$spec29194 cljs.spec/t_cljs$spec28824 cljs.spec/t_cljs$spec28799 cljs.spec/t_cljs$spec29176 cljs.spec/t_cljs$spec28830 cljs.spec/t_cljs$spec28842 cljs.spec/t_cljs$spec28871 cljs.spec/t_cljs$spec29187 cljs.spec/t_cljs$spec28970 cljs.spec/t_cljs$spec29172 cljs.spec/t_cljs$spec28861 cljs.spec/t_cljs$spec28966 cljs.spec/t_cljs$spec28778}, :doc nil, :jsdoc ("@interface")}, valid? {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 370, :column 7, :end-line 370, :end-column 13, :arglists (quote ([spec x] [spec x form])), :doc "Helper function that returns true when x is valid for spec.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([spec x] [spec x form]), :arglists ([spec x] [spec x form]), :arglists-meta (nil nil)}}, :name cljs.spec/valid?, :variadic false, :file "out/cljs/spec.cljs", :end-column 13, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([spec x] [spec x form]), :arglists ([spec x] [spec x form]), :arglists-meta (nil nil)}, :method-params ([spec x] [spec x form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 370, :end-line 370, :max-fixed-arity 3, :fn-var true, :arglists ([spec x] [spec x form]), :doc "Helper function that returns true when x is valid for spec."}, coll-checker {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 1035, :column 7, :end-line 1035, :end-column 19, :arglists (quote ([pred])), :doc "returns a predicate function that checks *coll-check-limit* items in a collection with pred"}, :name cljs.spec/coll-checker, :variadic false, :file "out/cljs/spec.cljs", :end-column 19, :method-params ([pred]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1035, :end-line 1035, :max-fixed-arity 1, :fn-var true, :arglists (quote ([pred])), :doc "returns a predicate function that checks *coll-check-limit* items in a collection with pred"}, ->t_cljs$spec28799 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([opt map-spec-impl req-un opt-un map__28797 gfn pred-exprs keys-pred argm opt-keys p__28775 req-specs keys->specs req id req-keys opt-specs k->s pred-forms meta28800])), :file nil}, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec28799, :variadic false, :file "out/cljs/spec.cljs", :method-params ([opt map-spec-impl req-un opt-un map__28797 gfn pred-exprs keys-pred argm opt-keys p__28775 req-specs keys->specs req id req-keys opt-specs k->s pred-forms meta28800]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 392, :max-fixed-arity 20, :fn-var true, :arglists (quote ([opt map-spec-impl req-un opt-un map__28797 gfn pred-exprs keys-pred argm opt-keys p__28775 req-specs keys->specs req id req-keys opt-specs k->s pred-forms meta28800])), :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}}, gen {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 210, :column 7, :end-line 210, :end-column 10, :arglists (quote ([spec] [spec overrides])), :doc "Given a spec, returns the generator for it, or throws if none can\n  be constructed. Optionally an overrides map can be provided which\n  should map paths (vectors of keywords) to generators. These will be\n  used instead of the generators at those paths. Note that parent\n  generator (in the spec or overrides map) will supersede those of any\n  subtrees. A generator for a regex op must always return a\n  sequential collection (i.e. a generator for s/? should return either\n  an empty sequence/vector or a sequence/vector with one item in it)", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([spec] [spec overrides]), :arglists ([spec] [spec overrides]), :arglists-meta (nil nil)}}, :name cljs.spec/gen, :variadic false, :file "out/cljs/spec.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([spec] [spec overrides]), :arglists ([spec] [spec overrides]), :arglists-meta (nil nil)}, :method-params ([spec] [spec overrides]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 210, :end-line 210, :max-fixed-arity 2, :fn-var true, :arglists ([spec] [spec overrides]), :doc "Given a spec, returns the generator for it, or throws if none can\n  be constructed. Optionally an overrides map can be provided which\n  should map paths (vectors of keywords) to generators. These will be\n  used instead of the generators at those paths. Note that parent\n  generator (in the spec or overrides map) will supersede those of any\n  subtrees. A generator for a regex op must always return a\n  sequential collection (i.e. a generator for s/? should return either\n  an empty sequence/vector or a sequence/vector with one item in it)"}, fn-spec-roles {:name cljs.spec/fn-spec-roles, :file "out/cljs/spec.cljs", :line 241, :column 1, :end-line 241, :end-column 29, :private true, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 241, :column 16, :end-line 241, :end-column 29, :private true}}, t_cljs$spec28966 {:num-fields 5, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec28966, :file "out/cljs/spec.cljs", :type true, :anonymous true, :column 3, :line 637, :record false, :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}}, ->sym {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 248, :column 8, :end-line 248, :end-column 13, :private true, :arglists (quote ([x])), :doc "Returns a symbol from a symbol or var"}, :private true, :name cljs.spec/->sym, :variadic false, :file "out/cljs/spec.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 248, :end-line 248, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "Returns a symbol from a symbol or var"}, abbrev {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 116, :column 7, :end-line 116, :end-column 13, :arglists (quote ([form]))}, :name cljs.spec/abbrev, :variadic false, :file "out/cljs/spec.cljs", :end-column 13, :method-params ([form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 116, :end-line 116, :max-fixed-arity 1, :fn-var true, :arglists (quote ([form]))}, regex? {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 75, :column 7, :end-line 75, :end-column 13, :arglists (quote ([x])), :doc "returns x if x is a (clojure.spec) regex op, else logical false"}, :name cljs.spec/regex?, :variadic false, :file "out/cljs/spec.cljs", :end-column 13, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 75, :end-line 75, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "returns x if x is a (clojure.spec) regex op, else logical false"}, expect {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 243, :column 8, :end-line 243, :end-column 14, :private true, :arglists (quote ([spec v])), :doc "Returns nil if v conforms to spec, else throws ex-info with explain-data."}, :private true, :name cljs.spec/expect, :variadic false, :file "out/cljs/spec.cljs", :end-column 14, :method-params ([spec v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 243, :end-line 243, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec v])), :doc "Returns nil if v conforms to spec, else throws ex-info with explain-data."}, t_cljs$spec28871 {:num-fields 8, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec28871, :file "out/cljs/spec.cljs", :type true, :anonymous true, :column 5, :line 585, :record false, :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}}, dt {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 357, :column 8, :end-line 357, :end-column 10, :private true, :arglists (quote ([pred x form] [pred x form cpred?])), :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([pred x form] [pred x form cpred?]), :arglists ([pred x form] [pred x form cpred?]), :arglists-meta (nil nil)}}, :private true, :name cljs.spec/dt, :variadic false, :file "out/cljs/spec.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([pred x form] [pred x form cpred?]), :arglists ([pred x form] [pred x form cpred?]), :arglists-meta (nil nil)}, :method-params ([pred x form] [pred x form cpred?]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 357, :end-line 357, :max-fixed-arity 4, :fn-var true, :arglists ([pred x form] [pred x form cpred?])}, t_cljs$spec28970 {:num-fields 5, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec28970, :file "out/cljs/spec.cljs", :type true, :anonymous true, :column 3, :line 637, :record false, :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}}, preturn {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 753, :column 8, :end-line 753, :end-column 15, :private true, :arglists (quote ([p]))}, :private true, :name cljs.spec/preturn, :variadic false, :file "out/cljs/spec.cljs", :end-column 15, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 753, :end-line 753, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p]))}, re-conform {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 901, :column 8, :end-line 901, :end-column 18, :private true, :arglists (quote ([p [x & xs :as data]]))}, :private true, :name cljs.spec/re-conform, :variadic false, :file "out/cljs/spec.cljs", :end-column 18, :method-params ([p p__29140]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 901, :end-line 901, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p [x & xs :as data]]))}, spec? {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 70, :column 7, :end-line 70, :end-column 12, :arglists (quote ([x])), :doc "returns x if x is a spec object, else logical false"}, :name cljs.spec/spec?, :variadic false, :file "out/cljs/spec.cljs", :end-column 12, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 70, :end-line 70, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :doc "returns x if x is a spec object, else logical false"}, named? {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 46, :column 8, :end-line 46, :end-column 14, :private true, :arglists (quote ([x]))}, :private true, :name cljs.spec/named?, :variadic false, :file "out/cljs/spec.cljs", :end-column 14, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 46, :end-line 46, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x]))}, registry {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 232, :column 7, :end-line 232, :end-column 15, :arglists (quote ([])), :doc "returns the registry map"}, :name cljs.spec/registry, :variadic false, :file "out/cljs/spec.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 232, :end-line 232, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "returns the registry map"}, rep+impl {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 686, :column 19, :end-line 686, :end-column 27, :skip-wiki true, :arglists (quote ([form p])), :doc "Do not call this directly, use '+'"}, :name cljs.spec/rep+impl, :variadic false, :file "out/cljs/spec.cljs", :end-column 27, :method-params ([form p]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 686, :end-line 686, :max-fixed-arity 2, :fn-var true, :arglists (quote ([form p])), :doc "Do not call this directly, use '+'"}, deriv {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 781, :column 8, :end-line 781, :end-column 13, :private true, :arglists (quote ([p x]))}, :private true, :name cljs.spec/deriv, :variadic false, :file "out/cljs/spec.cljs", :end-column 13, :method-params ([p x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 781, :end-line 781, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p x]))}, t_cljs$spec29187 {:num-fields 10, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec29187, :file "out/cljs/spec.cljs", :type true, :anonymous true, :column 5, :line 988, :record false, :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}}, t_cljs$spec28842 {:num-fields 9, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec28842, :file "out/cljs/spec.cljs", :type true, :anonymous true, :column 6, :line 491, :record false, :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}}, exercise {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 1026, :column 7, :end-line 1026, :end-column 15, :arglists (quote ([spec] [spec n] [spec n overrides])), :doc "generates a number (default 10) of values compatible with spec and maps conform over them,\n  returning a sequence of [val conformed-val] tuples. Optionally takes\n  a generator overrides map as per gen", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([spec] [spec n] [spec n overrides]), :arglists ([spec] [spec n] [spec n overrides]), :arglists-meta (nil nil nil)}}, :name cljs.spec/exercise, :variadic false, :file "out/cljs/spec.cljs", :end-column 15, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([spec] [spec n] [spec n overrides]), :arglists ([spec] [spec n] [spec n overrides]), :arglists-meta (nil nil nil)}, :method-params ([spec] [spec n] [spec n overrides]), :protocol-impl nil, :arglists-meta (nil nil nil), :column 1, :line 1026, :end-line 1026, :max-fixed-arity 3, :fn-var true, :arglists ([spec] [spec n] [spec n overrides]), :doc "generates a number (default 10) of values compatible with spec and maps conform over them,\n  returning a sequence of [val conformed-val] tuples. Optionally takes\n  a generator overrides map as per gen"}, t_cljs$spec28830 {:num-fields 6, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec28830, :file "out/cljs/spec.cljs", :type true, :anonymous true, :column 5, :line 464, :record false, :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}}, ->t_cljs$spec28875 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([or-spec-impl keys forms preds gfn id cform meta28876])), :file nil}, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec28875, :variadic false, :file "out/cljs/spec.cljs", :method-params ([or-spec-impl keys forms preds gfn id cform meta28876]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 585, :max-fixed-arity 8, :fn-var true, :arglists (quote ([or-spec-impl keys forms preds gfn id cform meta28876])), :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}}, explain-data {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 149, :column 7, :end-line 149, :end-column 19, :arglists (quote ([spec x])), :doc "Given a spec and a value x which ought to conform, returns nil if x\n  conforms, else a map with at least the key ::problems whose value is\n  a path->problem-map, where problem-map has at least :pred and :val\n  keys describing the predicate and the value that failed at that\n  path."}, :name cljs.spec/explain-data, :variadic false, :file "out/cljs/spec.cljs", :end-column 19, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 149, :end-line 149, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x])), :doc "Given a spec and a value x which ought to conform, returns nil if x\n  conforms, else a map with at least the key ::problems whose value is\n  a path->problem-map, where problem-map has at least :pred and :val\n  keys describing the predicate and the value that failed at that\n  path."}, ->t_cljs$spec28824 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([spec-impl form pred gfn cpred? meta28825])), :file nil}, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec28824, :variadic false, :file "out/cljs/spec.cljs", :method-params ([spec-impl form pred gfn cpred? meta28825]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 464, :max-fixed-arity 6, :fn-var true, :arglists (quote ([spec-impl form pred gfn cpred? meta28825])), :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}}, tuple-impl {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 524, :column 19, :end-line 524, :end-column 29, :skip-wiki true, :arglists (quote ([forms preds] [forms preds gfn])), :doc "Do not call this directly, use 'tuple'", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([forms preds] [forms preds gfn]), :arglists ([forms preds] [forms preds gfn]), :arglists-meta (nil nil)}}, :name cljs.spec/tuple-impl, :variadic false, :file "out/cljs/spec.cljs", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([forms preds] [forms preds gfn]), :arglists ([forms preds] [forms preds gfn]), :arglists-meta (nil nil)}, :method-params ([forms preds] [forms preds gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 524, :end-line 524, :max-fixed-arity 3, :fn-var true, :arglists ([forms preds] [forms preds gfn]), :doc "Do not call this directly, use 'tuple'"}, t_cljs$spec29176 {:num-fields 4, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec29176, :file "out/cljs/spec.cljs", :type true, :anonymous true, :column 3, :line 941, :record false, :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}}, instrument* {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 326, :column 7, :end-line 326, :end-column 18, :arglists (quote ([v]))}, :name cljs.spec/instrument*, :variadic false, :file "out/cljs/spec.cljs", :end-column 18, :method-params ([v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 326, :end-line 326, :max-fixed-arity 1, :fn-var true, :arglists (quote ([v]))}, multi-spec-impl {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 478, :column 19, :end-line 478, :end-column 34, :skip-wiki true, :arglists (quote ([form mmvar retag] [form mmvar retag gfn])), :doc "Do not call this directly, use 'multi-spec'", :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([form mmvar retag] [form mmvar retag gfn]), :arglists ([form mmvar retag] [form mmvar retag gfn]), :arglists-meta (nil nil)}}, :name cljs.spec/multi-spec-impl, :variadic false, :file "out/cljs/spec.cljs", :end-column 34, :top-fn {:variadic false, :max-fixed-arity 4, :method-params ([form mmvar retag] [form mmvar retag gfn]), :arglists ([form mmvar retag] [form mmvar retag gfn]), :arglists-meta (nil nil)}, :method-params ([form mmvar retag] [form mmvar retag gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 478, :end-line 478, :max-fixed-arity 4, :fn-var true, :arglists ([form mmvar retag] [form mmvar retag gfn]), :doc "Do not call this directly, use 'multi-spec'"}, ->t_cljs$spec28970 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([and-spec-impl forms preds gfn meta28971])), :file nil}, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec28970, :variadic false, :file "out/cljs/spec.cljs", :method-params ([and-spec-impl forms preds gfn meta28971]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :line 637, :max-fixed-arity 5, :fn-var true, :arglists (quote ([and-spec-impl forms preds gfn meta28971])), :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}}, t_cljs$spec28778 {:num-fields 20, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec28778, :file "out/cljs/spec.cljs", :type true, :anonymous true, :column 5, :line 392, :record false, :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}}, conform {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 104, :column 7, :end-line 104, :end-column 14, :arglists (quote ([spec x])), :doc "Given a spec and a value, returns :clojure.spec/invalid if value does not match spec,\n  else the (possibly destructured) value."}, :name cljs.spec/conform, :variadic false, :file "out/cljs/spec.cljs", :end-column 14, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 104, :end-line 104, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x])), :doc "Given a spec and a value, returns :clojure.spec/invalid if value does not match spec,\n  else the (possibly destructured) value."}, ->t_cljs$spec28871 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([or-spec-impl keys forms preds gfn id cform meta28872])), :file nil}, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec28871, :variadic false, :file "out/cljs/spec.cljs", :method-params ([or-spec-impl keys forms preds gfn id cform meta28872]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 585, :max-fixed-arity 8, :fn-var true, :arglists (quote ([or-spec-impl keys forms preds gfn id cform meta28872])), :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}}, ->t_cljs$spec28861 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([forms preds gfn meta28862])), :file nil}, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec28861, :variadic false, :file "out/cljs/spec.cljs", :method-params ([forms preds gfn meta28862]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 4, :factory :positional, :line 528, :max-fixed-arity 4, :fn-var true, :arglists (quote ([forms preds gfn meta28862])), :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}}, gen* {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 40, :column 4, :end-line 40, :end-column 8, :protocol cljs.spec/Spec, :doc nil, :arglists (quote ([spec overrides path rmap]))}, :protocol cljs.spec/Spec, :name cljs.spec/gen*, :variadic false, :file "out/cljs/spec.cljs", :end-column 8, :method-params ([spec overrides path rmap]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 40, :max-fixed-arity 4, :fn-var true, :arglists (quote ([spec overrides path rmap])), :doc nil}, fspec-impl {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 983, :column 19, :end-line 983, :end-column 29, :skip-wiki true, :arglists (quote ([argspec aform retspec rform fnspec fform gfn])), :doc "Do not call this directly, use 'fspec'"}, :name cljs.spec/fspec-impl, :variadic false, :file "out/cljs/spec.cljs", :end-column 29, :method-params ([argspec aform retspec rform fnspec fform gfn]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 983, :end-line 983, :max-fixed-arity 7, :fn-var true, :arglists (quote ([argspec aform retspec rform fnspec fform gfn])), :doc "Do not call this directly, use 'fspec'"}, inck {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 354, :column 8, :end-line 354, :end-column 12, :private true, :arglists (quote ([m k]))}, :private true, :name cljs.spec/inck, :variadic false, :file "out/cljs/spec.cljs", :end-column 12, :method-params ([m k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 354, :end-line 354, :max-fixed-arity 2, :fn-var true, :arglists (quote ([m k]))}, *coll-check-limit* {:name cljs.spec/*coll-check-limit*, :file "out/cljs/spec.cljs", :line 29, :column 1, :end-line 29, :end-column 34, :dynamic true, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 29, :column 16, :end-line 29, :end-column 34, :dynamic true}, :doc "The number of items validated in a collection spec'ed with 'coll'"}, ->t_cljs$spec28778 {:protocol-inline nil, :meta {:anonymous true, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}, :factory :positional, :arglists (quote ([opt map-spec-impl req-un opt-un gfn pred-exprs keys-pred argm map__28776 opt-keys p__28775 req-specs keys->specs req id req-keys opt-specs k->s pred-forms meta28779])), :file nil}, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/->t_cljs$spec28778, :variadic false, :file "out/cljs/spec.cljs", :method-params ([opt map-spec-impl req-un opt-un gfn pred-exprs keys-pred argm map__28776 opt-keys p__28775 req-specs keys->specs req id req-keys opt-specs k->s pred-forms meta28779]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :line 392, :max-fixed-arity 20, :fn-var true, :arglists (quote ([opt map-spec-impl req-un opt-un gfn pred-exprs keys-pred argm map__28776 opt-keys p__28775 req-specs keys->specs req id req-keys opt-specs k->s pred-forms meta28779])), :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}}, gensub {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 202, :column 8, :end-line 202, :end-column 14, :private true, :arglists (quote ([spec overrides path rmap form]))}, :private true, :name cljs.spec/gensub, :variadic false, :file "out/cljs/spec.cljs", :end-column 14, :method-params ([spec overrides path rmap form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 202, :end-line 202, :max-fixed-arity 5, :fn-var true, :arglists (quote ([spec overrides path rmap form]))}, the-spec {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 94, :column 8, :end-line 94, :end-column 16, :private true, :arglists (quote ([spec-or-k])), :doc "spec-or-k must be a spec, regex or kw/sym, else returns nil. Throws if unresolvable kw/sym"}, :private true, :name cljs.spec/the-spec, :variadic false, :file "out/cljs/spec.cljs", :end-column 16, :method-params ([spec-or-k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 94, :end-line 94, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec-or-k])), :doc "spec-or-k must be a spec, regex or kw/sym, else returns nil. Throws if unresolvable kw/sym"}, accept-nil? {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 736, :column 8, :end-line 736, :end-column 19, :private true, :arglists (quote ([p]))}, :private true, :name cljs.spec/accept-nil?, :variadic false, :file "out/cljs/spec.cljs", :end-column 19, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 736, :end-line 736, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p]))}, maybe-spec {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 83, :column 8, :end-line 83, :end-column 18, :private true, :arglists (quote ([spec-or-k])), :doc "spec-or-k must be a spec, regex or resolvable kw/sym, else returns nil."}, :private true, :name cljs.spec/maybe-spec, :variadic false, :file "out/cljs/spec.cljs", :end-column 18, :method-params ([spec-or-k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 83, :end-line 83, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec-or-k])), :doc "spec-or-k must be a spec, regex or resolvable kw/sym, else returns nil."}, spec-impl {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 456, :column 19, :end-line 456, :end-column 28, :skip-wiki true, :arglists (quote ([form pred gfn cpred?])), :doc "Do not call this directly, use 'spec'"}, :name cljs.spec/spec-impl, :variadic false, :file "out/cljs/spec.cljs", :end-column 28, :method-params ([form pred gfn cpred?]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 456, :end-line 456, :max-fixed-arity 4, :fn-var true, :arglists (quote ([form pred gfn cpred?])), :doc "Do not call this directly, use 'spec'"}, coll-gen {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 1045, :column 7, :end-line 1045, :end-column 15, :arglists (quote ([pred init-coll])), :doc "returns a function of no args that returns a generator of\n  collections of items conforming to pred, with the same shape as\n  init-coll"}, :name cljs.spec/coll-gen, :variadic false, :file "out/cljs/spec.cljs", :end-column 15, :method-params ([pred init-coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 1045, :end-line 1045, :max-fixed-arity 2, :fn-var true, :arglists (quote ([pred init-coll])), :doc "returns a function of no args that returns a generator of\n  collections of items conforming to pred, with the same shape as\n  init-coll"}, amp-impl {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 691, :column 19, :end-line 691, :end-column 27, :skip-wiki true, :arglists (quote ([re preds pred-forms])), :doc "Do not call this directly, use '&'"}, :name cljs.spec/amp-impl, :variadic false, :file "out/cljs/spec.cljs", :end-column 27, :method-params ([re preds pred-forms]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 691, :end-line 691, :max-fixed-arity 3, :fn-var true, :arglists (quote ([re preds pred-forms])), :doc "Do not call this directly, use '&'"}, pcat* {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 658, :column 8, :end-line 658, :end-column 13, :private true, :arglists (quote ([{[p1 & pr :as ps] :ps, [k1 & kr :as ks] :ks, [f1 & fr :as forms] :forms, ret :ret, rep+ :rep+}]))}, :private true, :name cljs.spec/pcat*, :variadic false, :file "out/cljs/spec.cljs", :end-column 13, :method-params ([p__28979]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 658, :end-line 658, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{[p1 & pr :as ps] :ps, [k1 & kr :as ks] :ks, [f1 & fr :as forms] :forms, ret :ret, rep+ :rep+}]))}, t_cljs$spec29194 {:num-fields 10, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec29194, :file "out/cljs/spec.cljs", :type true, :anonymous true, :column 5, :line 988, :record false, :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}}, alt* {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 705, :column 8, :end-line 705, :end-column 12, :private true, :arglists (quote ([ps ks forms]))}, :private true, :name cljs.spec/alt*, :variadic false, :file "out/cljs/spec.cljs", :end-column 12, :method-params ([ps ks forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 705, :end-line 705, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ps ks forms]))}, cat-impl {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 670, :column 19, :end-line 670, :end-column 27, :skip-wiki true, :arglists (quote ([ks ps forms])), :doc "Do not call this directly, use 'cat'"}, :name cljs.spec/cat-impl, :variadic false, :file "out/cljs/spec.cljs", :end-column 27, :method-params ([ks ps forms]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 670, :end-line 670, :max-fixed-arity 3, :fn-var true, :arglists (quote ([ks ps forms])), :doc "Do not call this directly, use 'cat'"}, reg-resolve {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 58, :column 8, :end-line 58, :end-column 19, :private true, :arglists (quote ([k])), :doc "returns the spec/regex at end of alias chain starting with k, nil if not found, k if k not Named"}, :private true, :name cljs.spec/reg-resolve, :variadic false, :file "out/cljs/spec.cljs", :end-column 19, :method-params ([k]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 58, :end-line 58, :max-fixed-arity 1, :fn-var true, :arglists (quote ([k])), :doc "returns the spec/regex at end of alias chain starting with k, nil if not found, k if k not Named"}, explain-str {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 195, :column 7, :end-line 195, :end-column 18, :arglists (quote ([spec x])), :doc "Given a spec and a value that fails to conform, returns an explanation as a string."}, :name cljs.spec/explain-str, :variadic false, :file "out/cljs/spec.cljs", :end-column 18, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 195, :end-line 195, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x])), :doc "Given a spec and a value that fails to conform, returns an explanation as a string."}, with-gen {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 140, :column 7, :end-line 140, :end-column 15, :arglists (quote ([spec gen-fn])), :doc "Takes a spec and a no-arg, generator-returning fn and returns a version of that spec that uses that generator"}, :name cljs.spec/with-gen, :variadic false, :file "out/cljs/spec.cljs", :end-column 15, :method-params ([spec gen-fn]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 140, :end-line 140, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec gen-fn])), :doc "Takes a spec and a no-arg, generator-returning fn and returns a version of that spec that uses that generator"}, conform* {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 38, :column 4, :end-line 38, :end-column 12, :protocol cljs.spec/Spec, :doc nil, :arglists (quote ([spec x]))}, :protocol cljs.spec/Spec, :name cljs.spec/conform*, :variadic false, :file "out/cljs/spec.cljs", :end-column 12, :method-params ([spec x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 38, :max-fixed-arity 2, :fn-var true, :arglists (quote ([spec x])), :doc nil}, noret? {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 728, :column 8, :end-line 728, :end-column 14, :private true, :arglists (quote ([p1 pret]))}, :private true, :name cljs.spec/noret?, :variadic false, :file "out/cljs/spec.cljs", :end-column 14, :method-params ([p1 pret]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 728, :end-line 728, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p1 pret]))}, rep-impl {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 682, :column 19, :end-line 682, :end-column 27, :skip-wiki true, :arglists (quote ([form p])), :doc "Do not call this directly, use '*'"}, :name cljs.spec/rep-impl, :variadic false, :file "out/cljs/spec.cljs", :end-column 27, :method-params ([form p]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 682, :end-line 682, :max-fixed-arity 2, :fn-var true, :arglists (quote ([form p])), :doc "Do not call this directly, use '*'"}, op-describe {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 797, :column 8, :end-line 797, :end-column 19, :private true, :arglists (quote ([p]))}, :private true, :name cljs.spec/op-describe, :variadic false, :file "out/cljs/spec.cljs", :end-column 19, :method-params ([p]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 797, :end-line 797, :max-fixed-arity 1, :fn-var true, :arglists (quote ([p]))}, describe {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 135, :column 7, :end-line 135, :end-column 15, :arglists (quote ([spec])), :doc "returns an abbreviated description of the spec as data"}, :name cljs.spec/describe, :variadic false, :file "out/cljs/spec.cljs", :end-column 15, :method-params ([spec]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 135, :end-line 135, :max-fixed-arity 1, :fn-var true, :arglists (quote ([spec])), :doc "returns an abbreviated description of the spec as data"}, explain-1 {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 377, :column 8, :end-line 377, :end-column 17, :private true, :arglists (quote ([form pred path via in v]))}, :private true, :name cljs.spec/explain-1, :variadic false, :file "out/cljs/spec.cljs", :end-column 17, :method-params ([form pred path via in v]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 377, :end-line 377, :max-fixed-arity 6, :fn-var true, :arglists (quote ([form pred path via in v]))}, explain-out {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 158, :column 8, :end-line 158, :end-column 19, :private true, :arglists (quote ([ed])), :doc "prints an explanation to *out*."}, :private true, :name cljs.spec/explain-out, :variadic false, :file "out/cljs/spec.cljs", :end-column 19, :method-params ([ed]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 158, :end-line 158, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ed])), :doc "prints an explanation to *out*."}, re-gen {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 865, :column 8, :end-line 865, :end-column 14, :private true, :arglists (quote ([p overrides path rmap f]))}, :private true, :name cljs.spec/re-gen, :variadic false, :file "out/cljs/spec.cljs", :end-column 14, :method-params ([p overrides path rmap f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 865, :end-line 865, :max-fixed-arity 5, :fn-var true, :arglists (quote ([p overrides path rmap f]))}, filter-alt {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 696, :column 8, :end-line 696, :end-column 18, :private true, :arglists (quote ([ps ks forms f]))}, :private true, :name cljs.spec/filter-alt, :variadic false, :file "out/cljs/spec.cljs", :end-column 18, :method-params ([ps ks forms f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 696, :end-line 696, :max-fixed-arity 4, :fn-var true, :arglists (quote ([ps ks forms f]))}, and-preds {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 611, :column 8, :end-line 611, :end-column 17, :private true, :arglists (quote ([x preds forms]))}, :private true, :name cljs.spec/and-preds, :variadic false, :file "out/cljs/spec.cljs", :end-column 17, :method-params ([x preds forms]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 611, :end-line 611, :max-fixed-arity 3, :fn-var true, :arglists (quote ([x preds forms]))}, no-fn-specs {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 317, :column 8, :end-line 317, :end-column 19, :private true, :arglists (quote ([v specs]))}, :private true, :name cljs.spec/no-fn-specs, :variadic false, :file "out/cljs/spec.cljs", :end-column 19, :method-params ([v specs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 317, :end-line 317, :max-fixed-arity 2, :fn-var true, :arglists (quote ([v specs]))}, call-valid? {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 962, :column 8, :end-line 962, :end-column 19, :private true, :arglists (quote ([f specs args]))}, :private true, :name cljs.spec/call-valid?, :variadic false, :file "out/cljs/spec.cljs", :end-column 19, :method-params ([f specs args]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 962, :end-line 962, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f specs args]))}, rep* {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 675, :column 8, :end-line 675, :end-column 12, :private true, :arglists (quote ([p1 p2 ret splice form]))}, :private true, :name cljs.spec/rep*, :variadic false, :file "out/cljs/spec.cljs", :end-column 12, :method-params ([p1 p2 ret splice form]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 675, :end-line 675, :max-fixed-arity 5, :fn-var true, :arglists (quote ([p1 p2 ret splice form]))}, t_cljs$spec28824 {:num-fields 6, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec28824, :file "out/cljs/spec.cljs", :type true, :anonymous true, :column 5, :line 464, :record false, :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}}, maybe-impl {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 724, :column 19, :end-line 724, :end-column 29, :skip-wiki true, :arglists (quote ([p form])), :doc "Do not call this directly, use '?'"}, :name cljs.spec/maybe-impl, :variadic false, :file "out/cljs/spec.cljs", :end-column 29, :method-params ([p form]), :protocol-impl nil, :skip-wiki true, :arglists-meta (nil nil), :column 1, :line 724, :end-line 724, :max-fixed-arity 2, :fn-var true, :arglists (quote ([p form])), :doc "Do not call this directly, use '?'"}, pcat {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 668, :column 8, :end-line 668, :end-column 12, :private true, :arglists (quote ([& ps])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(ps)], :arglists ([& ps]), :arglists-meta (nil)}}, :private true, :name cljs.spec/pcat, :variadic true, :file "out/cljs/spec.cljs", :end-column 12, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(ps)], :arglists ([& ps]), :arglists-meta (nil)}, :method-params [(ps)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 668, :end-line 668, :max-fixed-arity 0, :fn-var true, :arglists ([& ps])}, explain* {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 39, :column 4, :end-line 39, :end-column 12, :protocol cljs.spec/Spec, :doc nil, :arglists (quote ([spec path via in x]))}, :protocol cljs.spec/Spec, :name cljs.spec/explain*, :variadic false, :file "out/cljs/spec.cljs", :end-column 12, :method-params ([spec path via in x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 37, :end-line 39, :max-fixed-arity 5, :fn-var true, :arglists (quote ([spec path via in x])), :doc nil}, t_cljs$spec28799 {:num-fields 20, :protocols #{cljs.core/IFn cljs.core/IMeta cljs.spec/Spec cljs.core/IWithMeta}, :name cljs.spec/t_cljs$spec28799, :file "out/cljs/spec.cljs", :type true, :anonymous true, :column 5, :line 392, :record false, :skip-protocol-flag #{cljs.core/IFn cljs.core/IMeta cljs.core/IWithMeta}}, validate-fn {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/out/cljs/spec.cljs", :line 973, :column 8, :end-line 973, :end-column 19, :private true, :arglists (quote ([f specs iters])), :doc "returns f if valid, else smallest"}, :private true, :name cljs.spec/validate-fn, :variadic false, :file "out/cljs/spec.cljs", :end-column 19, :method-params ([f specs iters]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 973, :end-line 973, :max-fixed-arity 3, :fn-var true, :arglists (quote ([f specs iters])), :doc "returns f if valid, else smallest"}}, :require-macros {c cljs.core, cljs.core cljs.core, s cljs.spec, cljs.spec cljs.spec, gen cljs.spec.impl.gen, cljs.spec.impl.gen cljs.spec.impl.gen}, :cljs.analyzer/constants {:seen #{form tag :args :req-un :opt-un cljs.spec/keys :cljs.spec/invalid cljs.spec/spec :p2 :ret :gfn fn? :pred-exprs vector? map :shrunk :fn meta28825 regex-spec-impl predx :rep+ :cljs.spec/amp cljs.core/= :opt-keys aform meta29195 :pred dval :splice and-spec-impl forms opt argspec :else :gen :cljs.spec/k map-spec-impl :ks cljs.core/count req-un opt-un :cljs.spec/args :_ :raw :via map__28797 :as meta28967 zipmap meta28831 :req-specs gfn fnspec cljs.spec/multi-spec map? pred-exprs meta28862 meta28971 keys-pred meta28800 cpred? or-spec-impl argm fn map__28776 :val fform meta29188 opt-keys pred :cljs.spec/alt p__28775 :skip-wiki :p1 cljs.core/zipmap meta28876 :cljs.spec/nil % :cljs.spec/pcat cljs.core/map cljs.spec/conformer method req-specs cljs.spec/* re :reason preds cljs.spec/+ meta29173 :req cljs.core/constantly :cljs.spec/name :cljs.spec/unknown :keys :cljs.spec/recursion-limit p1__29206# s/and :var fn* cljs.spec/alt :id meta28779 fspec-impl :cljs.spec/rep :smallest :specs keys->specs mmvar :req-keys retag meta28872 :cljs.spec/any retspec :cljs.spec/accept :opt-specs cljs.spec/cat meta29177 rform :pred-forms req keys spec-impl meta28843 cljs.spec/or quote :arglists id cljs.spec/fspec :doc specs cljs.spec/tuple req-keys apply :cljs.spec/op :cljs.spec/v cform :wrapped clojure.spec/& opt-specs :cljs.spec/problems :forms :ps k->s :cljs.spec/kvs->map :in :accept :opt cljs.spec.impl.gen/any pred-forms}, :order [:cljs.spec/name :cljs.spec/op :cljs.spec/unknown fn % :else :cljs.spec/problems :pred :val :reason :via :in :cljs.spec/recursion-limit :args :ret :fn :cljs.spec/invalid :cljs.spec/args :var :specs :raw :wrapped :opt :req-un :opt-un :gfn :pred-exprs :opt-keys :req-specs :req :req-keys :opt-specs :pred-forms map? cljs.spec/keys opt map-spec-impl :skip-wiki :arglists :doc quote :keys :as req-un opt-un pred-exprs opt-keys req-specs req req-keys opt-specs pred-forms gfn argm keys-pred map__28776 p__28775 keys->specs id k->s meta28779 map__28797 meta28800 spec-impl form pred cpred? meta28825 meta28831 method cljs.spec/multi-spec mmvar retag predx dval tag meta28843 vector? cljs.core/= cljs.core/count cljs.spec/tuple forms preds meta28862 cljs.spec/or or-spec-impl keys cform meta28872 meta28876 s/and and-spec-impl meta28967 meta28971 :cljs.spec/accept :ps :ks :forms :rep+ :cljs.spec/pcat :p2 :splice :id :cljs.spec/rep :p1 cljs.spec/* :cljs.spec/amp :cljs.spec/alt :cljs.spec/nil clojure.spec/& cljs.spec/+ cljs.spec/cat :_ cljs.spec/alt :accept regex-spec-impl re meta29173 meta29177 :smallest :shrunk apply fn? cljs.spec/fspec fspec-impl argspec aform retspec rform fnspec fform specs meta29188 meta29195 :cljs.spec/any cljs.spec/spec cljs.core/constantly :gen cljs.spec.impl.gen/any :cljs.spec/kvs->map cljs.spec/conformer fn* p1__29206# cljs.core/zipmap cljs.core/map :cljs.spec/k :cljs.spec/v zipmap map]}, :doc nil}