{:use-macros nil, :excludes #{}, :name tattoo.core, :imports nil, :requires {svg cljsjs.snapsvg, cljsjs.snapsvg cljsjs.snapsvg}, :uses nil, :defs {refine-side {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 284, :column 7, :end-line 284, :end-column 18, :arglists (quote ([t side])), :doc "Constrains a side to start at the base, and to the appropriate length."}, :name tattoo.core/refine-side, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :end-column 18, :method-params ([t side]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 284, :end-line 284, :max-fixed-arity 2, :fn-var true, :arglists (quote ([t side])), :doc "Constrains a side to start at the base, and to the appropriate length."}, base {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 191, :column 7, :end-line 191, :end-column 11, :arglists (quote ([t])), :doc "Computes the base of a node."}, :name tattoo.core/base, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :end-column 11, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 191, :end-line 191, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t])), :doc "Computes the base of a node."}, initial-coords {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 421, :column 7, :end-line 421, :end-column 21, :arglists (quote ([t])), :doc "Augments a tree by adding coordinates and scales to each node."}, :name tattoo.core/initial-coords, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :end-column 21, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 421, :end-line 421, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t])), :doc "Augments a tree by adding coordinates and scales to each node."}, tree->dtree {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 450, :column 7, :end-line 450, :end-column 18, :arglists (quote ([t])), :doc "Turns a tree into a dynamic tree with atoms for :x and :y coords."}, :name tattoo.core/tree->dtree, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :end-column 18, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 450, :end-line 450, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t])), :doc "Turns a tree into a dynamic tree with atoms for :x and :y coords."}, log {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 13, :column 7, :end-line 13, :end-column 10, :arglists (quote ([& args])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name tattoo.core/log, :variadic true, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 0, :fn-var true, :arglists ([& args])}, refresh! {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 512, :column 7, :end-line 512, :end-column 15, :arglists (quote ([])), :doc "Resets scene."}, :name tattoo.core/refresh!, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 512, :end-line 512, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :doc "Resets scene."}, internal-sides {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 233, :column 7, :end-line 233, :end-column 21, :arglists (quote ([t])), :doc "Lays out internal sides."}, :name tattoo.core/internal-sides, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :end-column 21, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 233, :end-line 233, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t])), :doc "Lays out internal sides."}, apex {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 342, :column 7, :end-line 342, :end-column 11, :arglists (quote ([t])), :doc "Computes the apex of a node."}, :name tattoo.core/apex, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :end-column 11, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 342, :end-line 342, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t])), :doc "Computes the apex of a node."}, refine-sides {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 313, :column 7, :end-line 313, :end-column 19, :arglists (quote ([t])), :doc "Constrains sides to base and to appropriate lengths."}, :name tattoo.core/refine-sides, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :end-column 19, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 313, :end-line 313, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t])), :doc "Constrains sides to base and to appropriate lengths."}, caps {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 335, :column 7, :end-line 335, :end-column 11, :arglists (quote ([t])), :doc "Adds caps to open nodes."}, :name tattoo.core/caps, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :end-column 11, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 335, :end-line 335, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t])), :doc "Adds caps to open nodes."}, parent-distance {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 182, :column 7, :end-line 182, :end-column 22, :arglists (quote ([t])), :doc "Adds the distance to the parent (or if no parent, to the farthest child: a\n  characteristic metric."}, :name tattoo.core/parent-distance, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :end-column 22, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 182, :end-line 182, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t])), :doc "Adds the distance to the parent (or if no parent, to the farthest child: a\n  characteristic metric."}, split-angle {:name tattoo.core/split-angle, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 4, :column 1, :end-line 4, :end-column 17, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 4, :column 6, :end-line 4, :end-column 17}}, dtheta {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 122, :column 7, :end-line 122, :end-column 13, :arglists (quote ([a b])), :doc "Difference in angle from b to a: two polar lines."}, :name tattoo.core/dtheta, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :end-column 13, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 122, :end-line 122, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b])), :doc "Difference in angle from b to a: two polar lines."}, intersection {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 63, :column 7, :end-line 63, :end-column 19, :arglists (quote ([[a1 a2] [b1 b2]])), :doc "Takes two lines [{:x :y} {:x :y}] and computes their intersection point {:x\n  :y}"}, :name tattoo.core/intersection, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :end-column 19, :method-params ([p__24409 p__24410]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 63, :end-line 63, :max-fixed-arity 2, :fn-var true, :arglists (quote ([[a1 a2] [b1 b2]])), :doc "Takes two lines [{:x :y} {:x :y}] and computes their intersection point {:x\n  :y}"}, init! {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 501, :column 7, :end-line 501, :end-column 12, :arglists (quote ([s tree])), :doc "Sets up scene on an SVG element"}, :name tattoo.core/init!, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :end-column 12, :method-params ([s tree]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 501, :end-line 501, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s tree])), :doc "Sets up scene on an SVG element"}, scale-to {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 112, :column 7, :end-line 112, :end-column 15, :arglists (quote ([l r])), :doc "Set a polar line's radius to r."}, :name tattoo.core/scale-to, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :end-column 15, :method-params ([l r]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 112, :end-line 112, :max-fixed-arity 2, :fn-var true, :arglists (quote ([l r])), :doc "Set a polar line's radius to r."}, with-relationships {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 164, :column 7, :end-line 164, :end-column 25, :arglists (quote ([t])), :doc "Given a node, augments its children with :parent, :before,\n  and :after siblings."}, :name tattoo.core/with-relationships, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :end-column 25, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 164, :end-line 164, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t])), :doc "Given a node, augments its children with :parent, :before,\n  and :after siblings."}, layout {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 391, :column 7, :end-line 391, :end-column 13, :arglists (quote ([t])), :doc "All layout passes"}, :name tattoo.core/layout, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :end-column 13, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 391, :end-line 391, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t])), :doc "All layout passes"}, render-control-points! {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 466, :column 7, :end-line 466, :end-column 29, :arglists (quote ([t s] [t top s])), :doc "Renders control points for dtree nodes.", :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([t s] [t top s]), :arglists ([t s] [t top s]), :arglists-meta (nil nil)}}, :name tattoo.core/render-control-points!, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :end-column 29, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([t s] [t top s]), :arglists ([t s] [t top s]), :arglists-meta (nil nil)}, :method-params ([t s] [t top s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 466, :end-line 466, :max-fixed-arity 3, :fn-var true, :arglists ([t s] [t top s]), :doc "Renders control points for dtree nodes."}, scale {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 107, :column 7, :end-line 107, :end-column 12, :arglists (quote ([l scale])), :doc "Scale a polar line."}, :name tattoo.core/scale, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :end-column 12, :method-params ([l scale]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 107, :end-line 107, :max-fixed-arity 2, :fn-var true, :arglists (quote ([l scale])), :doc "Scale a polar line."}, cart->polar {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 78, :column 7, :end-line 78, :end-column 18, :arglists (quote ([[a b]])), :doc "Takes a pair of points [{:x :y} {:x :y}] and yields a polar line segment\n\n  {:origin {:x :y}\n  :r      radius\n  :theta  theta}"}, :name tattoo.core/cart->polar, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :end-column 18, :method-params ([p__24423]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 78, :end-line 78, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[a b]])), :doc "Takes a pair of points [{:x :y} {:x :y}] and yields a polar line segment\n\n  {:origin {:x :y}\n  :r      radius\n  :theta  theta}"}, grid {:name tattoo.core/grid, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 6, :column 1, :end-line 6, :end-column 10, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 6, :column 6, :end-line 6, :end-column 10}}, refine-caps {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 349, :column 7, :end-line 349, :end-column 18, :arglists (quote ([t])), :doc "Pins caps to apex"}, :name tattoo.core/refine-caps, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :end-column 18, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 349, :end-line 349, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t])), :doc "Pins caps to apex"}, Dtheta {:name tattoo.core/Dtheta, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 8, :column 1, :end-line 8, :end-column 12, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 8, :column 6, :end-line 8, :end-column 12}}, sexp->tree {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 413, :column 7, :end-line 413, :end-column 17, :arglists (quote ([sexp])), :doc "Converts sexprs to a tree."}, :name tattoo.core/sexp->tree, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :end-column 17, :method-params ([sexp]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 413, :end-line 413, :max-fixed-arity 1, :fn-var true, :arglists (quote ([sexp])), :doc "Converts sexprs to a tree."}, render! {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 400, :column 7, :end-line 400, :end-column 14, :arglists (quote ([t s])), :doc "Renders a tree once laid out."}, :name tattoo.core/render!, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :end-column 14, :method-params ([t s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 400, :end-line 400, :max-fixed-arity 2, :fn-var true, :arglists (quote ([t s])), :doc "Renders a tree once laid out."}, point-line-distance {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 49, :column 7, :end-line 49, :end-column 26, :arglists (quote ([point [a b]])), :doc "Yields the distance from a point to a cartesian line."}, :name tattoo.core/point-line-distance, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :end-column 26, :method-params ([point p__24402]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 49, :end-line 49, :max-fixed-arity 2, :fn-var true, :arglists (quote ([point [a b]])), :doc "Yields the distance from a point to a cartesian line."}, norm {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 17, :column 7, :end-line 17, :end-column 11, :arglists (quote ([[a b]])), :doc "Length of a cartesian line segment."}, :name tattoo.core/norm, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :end-column 11, :method-params ([p__24395]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 17, :end-line 17, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[a b]])), :doc "Length of a cartesian line segment."}, external-sides {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 256, :column 7, :end-line 256, :end-column 21, :arglists (quote ([t])), :doc "Adds external sides to a node."}, :name tattoo.core/external-sides, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :end-column 21, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 256, :end-line 256, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t])), :doc "Adds external sides to a node."}, midpoint {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 23, :column 7, :end-line 23, :end-column 15, :arglists (quote ([a b])), :doc "Midpoint of two cartesian points, weighted by their scales."}, :name tattoo.core/midpoint, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :end-column 15, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b])), :doc "Midpoint of two cartesian points, weighted by their scales."}, base-corners {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 263, :column 7, :end-line 263, :end-column 19, :arglists (quote ([t])), :doc "Given a node, computes base corners based on the intersection of nearby\n  bases OR bases with parent sides OR own sides."}, :name tattoo.core/base-corners, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :end-column 19, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 263, :end-line 263, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t])), :doc "Given a node, computes base corners based on the intersection of nearby\n  bases OR bases with parent sides OR own sides."}, recurse {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 358, :column 7, :end-line 358, :end-column 14, :arglists (quote ([t f])), :doc "Lays out children using f."}, :name tattoo.core/recurse, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :end-column 14, :method-params ([t f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 358, :end-line 358, :max-fixed-arity 2, :fn-var true, :arglists (quote ([t f])), :doc "Lays out children using f."}, tip {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 97, :column 7, :end-line 97, :end-column 10, :arglists (quote ([l])), :doc "Tip of a polar line segment."}, :name tattoo.core/tip, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :end-column 10, :method-params ([l]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 97, :end-line 97, :max-fixed-arity 1, :fn-var true, :arglists (quote ([l])), :doc "Tip of a polar line segment."}, ids {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 149, :column 7, :end-line 149, :end-column 10, :arglists (quote ([t] [t id])), :doc "Assign unique numbers to all tree nodes.", :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([t] [t id]), :arglists ([t] [t id]), :arglists-meta (nil nil)}}, :name tattoo.core/ids, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :end-column 10, :top-fn {:variadic false, :max-fixed-arity 2, :method-params ([t] [t id]), :arglists ([t] [t id]), :arglists-meta (nil nil)}, :method-params ([t] [t id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 149, :end-line 149, :max-fixed-arity 2, :fn-var true, :arglists ([t] [t id]), :doc "Assign unique numbers to all tree nodes."}, cap {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 320, :column 7, :end-line 320, :end-column 10, :arglists (quote ([t side])), :doc "Constructs a particular cap based on side"}, :name tattoo.core/cap, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :end-column 10, :method-params ([t side]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 320, :end-line 320, :max-fixed-arity 2, :fn-var true, :arglists (quote ([t side])), :doc "Constructs a particular cap based on side"}, translate-to {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 102, :column 7, :end-line 102, :end-column 19, :arglists (quote ([l origin])), :doc "Translate a polar line to a new origin."}, :name tattoo.core/translate-to, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :end-column 19, :method-params ([l origin]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 102, :end-line 102, :max-fixed-arity 2, :fn-var true, :arglists (quote ([l origin])), :doc "Translate a polar line to a new origin."}, polar->cart {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 91, :column 7, :end-line 91, :end-column 18, :arglists (quote ([{:keys [origin r theta]}])), :doc "Takes a polar line segment and returns a pair of points."}, :name tattoo.core/polar->cart, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :end-column 18, :method-params ([p__24430]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 91, :end-line 91, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [origin r theta]}])), :doc "Takes a polar line segment and returns a pair of points."}, layout-0 {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 366, :column 7, :end-line 366, :end-column 15, :arglists (quote ([t]))}, :name tattoo.core/layout-0, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :end-column 15, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 366, :end-line 366, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t]))}, between-boxes {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 33, :column 7, :end-line 33, :end-column 20, :arglists (quote ([a b])), :doc "Returns a point halfway between two SVG elements' bounding boxes, as an {:x\n  :y} map."}, :name tattoo.core/between-boxes, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :end-column 20, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 33, :end-line 33, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b])), :doc "Returns a point halfway between two SVG elements' bounding boxes, as an {:x\n  :y} map."}, layout-2 {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 382, :column 7, :end-line 382, :end-column 15, :arglists (quote ([t]))}, :name tattoo.core/layout-2, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :end-column 15, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 382, :end-line 382, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t]))}, add-line! {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 132, :column 7, :end-line 132, :end-column 16, :arglists (quote ([s [a b]] [s line opts])), :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s [a b]] [s line opts]), :arglists ([s [a b]] [s line opts]), :arglists-meta (nil nil)}}, :name tattoo.core/add-line!, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :end-column 16, :top-fn {:variadic false, :max-fixed-arity 3, :method-params ([s [a b]] [s line opts]), :arglists ([s [a b]] [s line opts]), :arglists-meta (nil nil)}, :method-params ([s [a b]] [s line opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 132, :end-line 132, :max-fixed-arity 3, :fn-var true, :arglists ([s [a b]] [s line opts])}, external-side {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 240, :column 7, :end-line 240, :end-column 20, :arglists (quote ([t dir])), :doc "Returns a side to a node, given a directional coefficient: -1 or +1."}, :name tattoo.core/external-side, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :end-column 20, :method-params ([t dir]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 240, :end-line 240, :max-fixed-arity 2, :fn-var true, :arglists (quote ([t dir])), :doc "Returns a side to a node, given a directional coefficient: -1 or +1."}, centroid {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 30, :column 7, :end-line 30, :end-column 15, :arglists (quote ([]))}, :name tattoo.core/centroid, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 30, :end-line 30, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, without-relationships {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 177, :column 7, :end-line 177, :end-column 28, :arglists (quote ([t])), :doc "Strips relationships off of a node."}, :name tattoo.core/without-relationships, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :end-column 28, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 177, :end-line 177, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t])), :doc "Strips relationships off of a node."}, dtree->tree {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 458, :column 7, :end-line 458, :end-column 18, :arglists (quote ([t])), :doc "Turns a dynamic tree back into a plain old static tree."}, :name tattoo.core/dtree->tree, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :end-column 18, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 458, :end-line 458, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t])), :doc "Turns a dynamic tree back into a plain old static tree."}, refine-base {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 279, :column 7, :end-line 279, :end-column 18, :arglists (quote ([t])), :doc "Constrains base to base corners."}, :name tattoo.core/refine-base, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :end-column 18, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 279, :end-line 279, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t])), :doc "Constrains base to base corners."}, internal-side {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 219, :column 7, :end-line 219, :end-column 20, :arglists (quote ([t n dir])), :doc "Lays out an internal side for a node and its neighbor, given a directional\n  coefficient of -1 or +1."}, :name tattoo.core/internal-side, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :end-column 20, :method-params ([t n dir]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 219, :end-line 219, :max-fixed-arity 3, :fn-var true, :arglists (quote ([t n dir])), :doc "Lays out an internal side for a node and its neighbor, given a directional\n  coefficient of -1 or +1."}, bisector {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 139, :column 7, :end-line 139, :end-column 15, :arglists (quote ([a b])), :doc "A cartesian line segment halfway between two points, weighted by point\n  scales."}, :name tattoo.core/bisector, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :end-column 15, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 139, :end-line 139, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b])), :doc "A cartesian line segment halfway between two points, weighted by point\n  scales."}, layout-1 {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 374, :column 7, :end-line 374, :end-column 15, :arglists (quote ([t]))}, :name tattoo.core/layout-1, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :end-column 15, :method-params ([t]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 374, :end-line 374, :max-fixed-arity 1, :fn-var true, :arglists (quote ([t]))}, add-circle! {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 127, :column 7, :end-line 127, :end-column 18, :arglists (quote ([s point opts]))}, :name tattoo.core/add-circle!, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :end-column 18, :method-params ([s point opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 127, :end-line 127, :max-fixed-arity 3, :fn-var true, :arglists (quote ([s point opts]))}, svg {:name tattoo.core/svg, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 11, :column 1, :end-line 11, :end-column 13, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 11, :column 10, :end-line 11, :end-column 13}}, rotate {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 117, :column 7, :end-line 117, :end-column 13, :arglists (quote ([l dtheta])), :doc "Rotate a polar line around its origin."}, :name tattoo.core/rotate, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :end-column 13, :method-params ([l dtheta]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 117, :end-line 117, :max-fixed-arity 2, :fn-var true, :arglists (quote ([l dtheta])), :doc "Rotate a polar line around its origin."}, svg->point {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/core.cljs", :line 42, :column 7, :end-line 42, :end-column 17, :arglists (quote ([s])), :doc "Turns an SVG object into a {:x, :y} point."}, :name tattoo.core/svg->point, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/core.cljs", :end-column 17, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 42, :end-line 42, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Turns an SVG object into a {:x, :y} point."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:y :parent-distance :children :r = :stroke :side2 :parent :cap1 :scale :base-corner-2 :base-corner-1 :symbol * :fill oct :theta pow :after :strokeWidth :cx :id :cy e / k :side1 c :origin :cap2 :x :base :before hbar :apex alpha}, :order [:y :x :scale :cx :cy :origin :r :theta :children :id :parent :before :after :parent-distance :base :side1 :side2 :base-corner-1 :base-corner-2 :cap1 :cap2 :apex :stroke :strokeWidth :symbol :fill = alpha / * k pow e hbar c oct]}, :doc nil}