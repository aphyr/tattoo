{:use-macros nil, :excludes #{}, :name tattoo.geometry, :imports nil, :requires nil, :uses nil, :defs {log {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/geometry.cljs", :line 3, :column 7, :end-line 3, :end-column 10, :arglists (quote ([& args])), :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}}, :name tattoo.geometry/log, :variadic true, :file "/home/aphyr/tattoo/src/tattoo/geometry.cljs", :end-column 10, :top-fn {:variadic true, :max-fixed-arity 0, :method-params [(args)], :arglists ([& args]), :arglists-meta (nil)}, :method-params [(args)], :protocol-impl nil, :arglists-meta (nil), :column 1, :line 3, :end-line 3, :max-fixed-arity 0, :fn-var true, :arglists ([& args])}, dtheta {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/geometry.cljs", :line 112, :column 7, :end-line 112, :end-column 13, :arglists (quote ([a b])), :doc "Difference in angle from b to a: two polar lines."}, :name tattoo.geometry/dtheta, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/geometry.cljs", :end-column 13, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 112, :end-line 112, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b])), :doc "Difference in angle from b to a: two polar lines."}, intersection {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/geometry.cljs", :line 53, :column 7, :end-line 53, :end-column 19, :arglists (quote ([[a1 a2] [b1 b2]])), :doc "Takes two lines [{:x :y} {:x :y}] and computes their intersection point {:x\n  :y}"}, :name tattoo.geometry/intersection, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/geometry.cljs", :end-column 19, :method-params ([p__24943 p__24944]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 53, :end-line 53, :max-fixed-arity 2, :fn-var true, :arglists (quote ([[a1 a2] [b1 b2]])), :doc "Takes two lines [{:x :y} {:x :y}] and computes their intersection point {:x\n  :y}"}, scale-to {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/geometry.cljs", :line 102, :column 7, :end-line 102, :end-column 15, :arglists (quote ([l r])), :doc "Set a polar line's radius to r."}, :name tattoo.geometry/scale-to, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/geometry.cljs", :end-column 15, :method-params ([l r]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 102, :end-line 102, :max-fixed-arity 2, :fn-var true, :arglists (quote ([l r])), :doc "Set a polar line's radius to r."}, scale {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/geometry.cljs", :line 97, :column 7, :end-line 97, :end-column 12, :arglists (quote ([l scale])), :doc "Scale a polar line."}, :name tattoo.geometry/scale, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/geometry.cljs", :end-column 12, :method-params ([l scale]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 97, :end-line 97, :max-fixed-arity 2, :fn-var true, :arglists (quote ([l scale])), :doc "Scale a polar line."}, cart->polar {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/geometry.cljs", :line 68, :column 7, :end-line 68, :end-column 18, :arglists (quote ([[a b]])), :doc "Takes a pair of points [{:x :y} {:x :y}] and yields a polar line segment\n\n  {:origin {:x :y}\n  :r      radius\n  :theta  theta}"}, :name tattoo.geometry/cart->polar, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/geometry.cljs", :end-column 18, :method-params ([p__24957]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 68, :end-line 68, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[a b]])), :doc "Takes a pair of points [{:x :y} {:x :y}] and yields a polar line segment\n\n  {:origin {:x :y}\n  :r      radius\n  :theta  theta}"}, point-line-distance {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/geometry.cljs", :line 39, :column 7, :end-line 39, :end-column 26, :arglists (quote ([point [a b]])), :doc "Yields the distance from a point to a cartesian line."}, :name tattoo.geometry/point-line-distance, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/geometry.cljs", :end-column 26, :method-params ([point p__24936]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 39, :end-line 39, :max-fixed-arity 2, :fn-var true, :arglists (quote ([point [a b]])), :doc "Yields the distance from a point to a cartesian line."}, norm {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/geometry.cljs", :line 7, :column 7, :end-line 7, :end-column 11, :arglists (quote ([[a b]])), :doc "Length of a cartesian line segment."}, :name tattoo.geometry/norm, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/geometry.cljs", :end-column 11, :method-params ([p__24929]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 7, :end-line 7, :max-fixed-arity 1, :fn-var true, :arglists (quote ([[a b]])), :doc "Length of a cartesian line segment."}, midpoint {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/geometry.cljs", :line 13, :column 7, :end-line 13, :end-column 15, :arglists (quote ([a b])), :doc "Midpoint of two cartesian points, weighted by their scales."}, :name tattoo.geometry/midpoint, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/geometry.cljs", :end-column 15, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 13, :end-line 13, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b])), :doc "Midpoint of two cartesian points, weighted by their scales."}, tip {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/geometry.cljs", :line 87, :column 7, :end-line 87, :end-column 10, :arglists (quote ([l])), :doc "Tip of a polar line segment."}, :name tattoo.geometry/tip, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/geometry.cljs", :end-column 10, :method-params ([l]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 87, :end-line 87, :max-fixed-arity 1, :fn-var true, :arglists (quote ([l])), :doc "Tip of a polar line segment."}, translate-to {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/geometry.cljs", :line 92, :column 7, :end-line 92, :end-column 19, :arglists (quote ([l origin])), :doc "Translate a polar line to a new origin."}, :name tattoo.geometry/translate-to, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/geometry.cljs", :end-column 19, :method-params ([l origin]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 92, :end-line 92, :max-fixed-arity 2, :fn-var true, :arglists (quote ([l origin])), :doc "Translate a polar line to a new origin."}, polar->cart {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/geometry.cljs", :line 81, :column 7, :end-line 81, :end-column 18, :arglists (quote ([{:keys [origin r theta]}])), :doc "Takes a polar line segment and returns a pair of points."}, :name tattoo.geometry/polar->cart, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/geometry.cljs", :end-column 18, :method-params ([p__24964]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 81, :end-line 81, :max-fixed-arity 1, :fn-var true, :arglists (quote ([{:keys [origin r theta]}])), :doc "Takes a polar line segment and returns a pair of points."}, between-boxes {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/geometry.cljs", :line 23, :column 7, :end-line 23, :end-column 20, :arglists (quote ([a b])), :doc "Returns a point halfway between two SVG elements' bounding boxes, as an {:x\n  :y} map."}, :name tattoo.geometry/between-boxes, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/geometry.cljs", :end-column 20, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 23, :end-line 23, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b])), :doc "Returns a point halfway between two SVG elements' bounding boxes, as an {:x\n  :y} map."}, centroid {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/geometry.cljs", :line 20, :column 7, :end-line 20, :end-column 15, :arglists (quote ([]))}, :name tattoo.geometry/centroid, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/geometry.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 20, :end-line 20, :max-fixed-arity 0, :fn-var true, :arglists (quote ([]))}, bisector {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/geometry.cljs", :line 117, :column 7, :end-line 117, :end-column 15, :arglists (quote ([a b])), :doc "A cartesian line segment halfway between two points, weighted by point\n  scales."}, :name tattoo.geometry/bisector, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/geometry.cljs", :end-column 15, :method-params ([a b]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 117, :end-line 117, :max-fixed-arity 2, :fn-var true, :arglists (quote ([a b])), :doc "A cartesian line segment halfway between two points, weighted by point\n  scales."}, rotate {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/geometry.cljs", :line 107, :column 7, :end-line 107, :end-column 13, :arglists (quote ([l dtheta])), :doc "Rotate a polar line around its origin."}, :name tattoo.geometry/rotate, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/geometry.cljs", :end-column 13, :method-params ([l dtheta]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 107, :end-line 107, :max-fixed-arity 2, :fn-var true, :arglists (quote ([l dtheta])), :doc "Rotate a polar line around its origin."}, svg->point {:protocol-inline nil, :meta {:file "/home/aphyr/tattoo/src/tattoo/geometry.cljs", :line 32, :column 7, :end-line 32, :end-column 17, :arglists (quote ([s])), :doc "Turns an SVG object into a {:x, :y} point."}, :name tattoo.geometry/svg->point, :variadic false, :file "/home/aphyr/tattoo/src/tattoo/geometry.cljs", :end-column 17, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :line 32, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :doc "Turns an SVG object into a {:x, :y} point."}}, :require-macros nil, :cljs.analyzer/constants {:seen #{:y :r :scale :theta :cx :cy :origin :x}, :order [:y :x :scale :cx :cy :origin :r :theta]}, :doc nil}